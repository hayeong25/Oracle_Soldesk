-- HR : ORACLE 연습용 계정
    -- SCOTT가 가지고 있는 정보의 원본
    
-- [문제1] employees 테이블 전체 내용 조회
    SELECT * FROM employees;
    
-- [문제2] employees 테이블의 first_name, last_name, job_id 조회
    SELECT first_name, last_name, job_id FROM employees;
    
-- [문제3] employees 테이블의 모든 열 조회, 부서번호를 기준으로 내림차순으로 정렬하되 부서번호가 같다면 사원이름(first_name)을 기준으로 오름차순 정렬
    -- employee_id : empno
    -- manager_id : mgr
    -- department_id : deptno
    SELECT employee_id AS empno, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id AS mgr, department_id AS deptno FROM employees ORDER BY deptno DESC, first_name ASC;
    
-- [문제4] 사원번호가 176인 사원의 last_name과 deptno 조회
    SELECT last_name, department_id FROM employees WHERE employee_id = 176;
    
-- [문제5] 연봉이 12,000 이상 되는 직원들의 lasg_name과 sal 조회
    SELECT last_name, salary FROM employees WHERE salary >= 12000;
    
-- [문제6] 연봉이 5000~12000 범위 사이가 아닌 사원들 조회
    SELECT * FROM employees WHERE salary NOT BETWEEN 5000 AND 12000;
    
-- [문제7] 20번 혹은 50번 부서에서 근무하는 모든 사원들의 last_name 및 department_id 조회 후, last_name 의 오름차순 department_id 의 오름차순으로 정렬
    SELECT last_name, department_id FROM employees WHERE department_id = 20 OR department_id = 50 ORDER BY last_name, department_id;

-- [문제8] 커미션을 받는 모든 사원들의 last_name, salary, commission_pct를 조회한다. 연봉의 내림차순, commission_pct 의 내림차순 정렬
    SELECT last_name, salary, commission_pct FROM employees WHERE commission_pct > 0 ORDER BY salary DESC, commission_pct DESC;
    
-- [문제9] 연봉이 2500, 3500, 7000이 아니며, 직업이 SA_REP, ST_CLERK인 사원 조회
    SELECT * FROM employees WHERE NOT salary IN (2500, 3500, 7000) AND job_id IN ('SA_REP', 'ST_CLERK');

-- [문제10] '2008-02-20' ~ '2008-05-01' 사이에 고용된 사원들의 last_name, employee_id, hire_date 조회, hire_date 내림차순
    SELECT last_name, employee_id, hire_date FROM employees WHERE hire_date BETWEEN '2008-02-20' AND '2008-05-01' ORDER BY hire_date DESC;

-- [문제11] 2004년도에 고용된 모든 사람들의 last_name, hire_date를 조회하여 입사일 기준으로 오름차순 정렬
    SELECT last_name, hire_date FROM employees WHERE hire_date BETWEEN '2004-01-01' AND '2004-12-31' ORDER BY hire_date;
    
-- [문제12] 문제 11번을 와일드카드를 사용해서
    SELECT last_name, hire_date FROM employees WHERE hire_date LIKE '04%' ORDER BY hire_date;
    
-- [문제13] last_name에 u가 포함되는 사원들의 사번 및 last_name 조회
    SELECT employee_id, last_name FROM employees WHERE last_name LIKE '%u%';

-- [문제14] last_name의 네 번째 글자가 a인 사원들의 사번 및 last_name 조회
    SELECT employee_id, last_name FROM employees WHERE last_name LIKE '___a%';

-- [문제15] last_name에 a 혹은 e가 들어있는 사원들의 last_name 조회 후 last_name 오름차순 출력
    SELECT last_name FROM employees WHERE last_name LIKE '%a%' OR last_name LIKE '%e%' ORDER BY last_name;

-- [문제15] last_name에 a와 e가 들어있는 사원들의 last_name 조회 후 last_name 오름차순 출력
    SELECT last_name FROM employees WHERE last_name LIKE '%a%' AND last_name LIKE '%e%' ORDER BY last_name;

-- [문제16] manager_id가 없는 사원들의 last_name, job_id 조회
    SELECT last_name, job_id, manager_id FROM employees WHERE manager_id IS NULL;
    
-- [문제17] ST_CLERK인 job_id를 가진 사원이 없는 department_id 조회
    SELECT department_id FROM employees WHERE job_id != 'ST_CLERK' AND job_id IS NOT NULL;
    
-- [문제18] commission_pct가 NULL이 아닌 사원들 중에서 commission = salary * commission_pct를 구하여 employee_id, first_name, job_id와 함께 출력
    SELECT employee_id, first_name, job_id, salary * commission_pct AS commission FROM employees WHERE commission_pct IS NOT NULL;
    
-- [문제19] first_name이 Curtis인 사람의 first_name, last_name, phone_number, job_id(소문자) 조회
    SELECT first_name, last_name, phone_number, LOWER(job_id) FROM employees WHERE first_name = 'Curtis';

-- [문제20] 부서 번호가 60, 70, 80, 90인 사원들의 employee_id, first_name, last_name, department_id, job_id 조회. 단, job_id가 IT_PROG인 경우 프로그래머로 변경해 출력
    SELECT employee_id, first_name, last_name, department_id, job_id, REPLACE(job_id, 'IT_PROG', 'PROGRAMMER') FROM employees WHERE department_id IN (60, 70, 80, 90);

-- [문제21] job_id가 AD_PRES, PU_CLERK인 사원들의 employee_id, first_name, last_name, department_id, job_id 조회. 단, 사원명은 first_name과 last_name을 연결해 출력
    SELECT employee_id, CONCAT(first_name, last_name), department_id, job_id FROM employees WHERE job_id = 'AD_PRES' OR job_id = 'PU_CLERK';
    
-- [문제22] 부서 id가 80인 사원에 대해 서로 다른 세율 적용 (2000 미만 0%, 4000 미만 9%, 6000 미만 20%, 8000 미만 30%, 10000 미만 40%, 12000 미만 42%, 14000 미만 44%, 그 외 45%)
    SELECT last_name, salary, DECODE(TRUNC(salary/2000), 0, 0.00, 1, 0.09, 2, 0.20, 3, 0.30, 4, 0.40, 5, 0.42, 6, 0.44, 0.45) as tax_rate FROM employees WHERE department_id = 80;

-- [문제23] 회사 내의 최대 연봉 및 최소 연봉 차 출력
    SELECT (MAX(salary) - MIN(salary)) FROM employees;

-- [문제24] 매니저로 근무하는 사원들의 총 숫자 출력
    SELECT COUNT(DISTINCT(manager_id)) FROM employees;

-- [문제25] 부서별 직원수를 구하여, 부서번호의 오름차순으로 출력
    SELECT department_id, COUNT(*) FROM employees GROUP BY department_id ORDER BY department_id;

-- [문제26] 부서별 급여의 평균 연봉. 부서별 오름차순
    SELECT department_id, ROUND(AVG(salary)) FROM employees GROUP BY department_id ORDER BY department_id;
    
-- [문제27] 동일한 직업을 가진 사원들의 수 출력
    SELECT job_id, COUNT(employee_id) FROM employees GROUP BY job_id;

-- [문제28] 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기(SELF JOIN)
    SELECT e1.employee_id, e1.last_name, e1.hire_date, e2.employee_id, e2.last_name, e2.hire_date FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.employee_id WHERE e1.hire_date < e2.hire_date;
    SELECT e1.employee_id, e1.hire_date as 입사일, e1.manager_id, e2.hire_date as 매니저입사일 FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.employee_id WHERE e1.hire_date < e2.hire_date ORDER BY e1.employee_id;
    
-- [문제29] 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, last_name, department_id, city 출력(employees, departments, locations 테이블 조인)
    SELECT e.employee_id, e.last_name, d.department_id, l.city FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN locations l ON d.location_id = l.location_id WHERE l.city LIKE 'T%';
    
-- [문제30] 위치 ID가 1700인 사원들의 employee_id, last_name, department_id, salary 출력(employees, departments 테이블 조인)
    SELECT e.employee_id, e.last_name, d.department_id, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.location_id = 1700;

-- [문제31] 각 부서별 평균 연봉(소수점 2자리까지), 사원 수 출력(department_name, location_id, sal_avg, cnt 출력(employees, departments 테이블 조인)
    SELECT d.department_name, d.location_id, ROUND(AVG(salary), 2) as sal_avg, COUNT(employee_id) as cnt FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name, d.location_id;

-- [문제32] Exeutive 부서에 근무하는 모든 사원들의 department_id, last_name, job_id 출력(employees, departments 테이블 조인)
    SELECT d.department_id, e.last_name, e.job_id FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Executive';

-- [문제33] 기존의 직업을 여전히 가지고 있는 사원들의 employee_id, job_id 출력(job_history INNER JOIN)
    SELECT e1.employee_id, e2.job_id FROM employees e1 JOIN employees e2 ON e1.employee_id = e2.employee_id JOIN job_history h ON h.employee_id = e2.employee_id WHERE h.job_id = e2.job_id;
    SELECT e.employee_id, j.job_id FROM employees e JOIN job_history j ON e.employee_id = j.employee_id WHERE e.job_id = j.job_id;

-- [문제34] 각 사원별 소속부서에서 자신보다 늦게 고용되었으나 보다 많은 연봉을 받는 사원의 department_id, last_name, salary, hire_date 출력(employees SELF JOIN)
    SELECT e1.department_id, e1.last_name, e1.salary, e1.hire_date, e2.last_name, e2.salary, e2.hire_date FROM employees e1 JOIN employees e2 ON e1.department_id = e2.department_id WHERE e1.hire_date < e2.hire_date AND e1.salary < e2.salary;
    SELECT DISTINCT e2.department_id, e2.last_name, e2.salary, e2.hire_date FROM employees e1 JOIN employees e2 ON e1.department_id = e2.department_id WHERE e1.hire_date < e2.hire_date AND e1.salary < e2.salary ORDER BY e2.department_id;
    
-- INDEX (FULL SCAN / RANGE SCAN)
    CREATE TABLE indextbl as SELECT DISTINCT first_name, last_name, hire_date FROM employees;
    CREATE INDEX idx_indextbl_firstname ON indextbl(first_name);
    SELECT * FROM indextbl WHERE first_name = 'Jack';

-- [문제35]

-- [문제36]
